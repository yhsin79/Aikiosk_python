from flask import Flask, Response, jsonify, render_template, request, redirect, url_for
import face_recognition
import cv2
import os
import json
from datetime import datetime
from flask_mysqldb import MySQL
import time
from scipy.spatial import distance

from collections import Counter


app = Flask(__name__)

# MySQL ÏÑ§Ï†ï
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_PORT'] = 3306  
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'cindykangnam1!2@'
app.config['MYSQL_DB'] = 'aikiosk_db'

mysql = MySQL(app)

# Ï†ÑÏó≠ Î≥ÄÏàò
check_start_time = None
person_detected = False
matched_once = False
matched_result = None
new_face_id = None

coffee_id =None

#Ïú†ÏÇ¨ ÏñºÍµ¥Ï°∞ÌöåÌïúÍ≤É Ï§ë Ï£ºÎ¨∏ Ïù¥Î†•Ïù¥ ÏûàÎäî Ï¥ù Í≥†Í∞ùÏàò
total_order_count =None 
#Ï¥ù Ïú†ÏÇ¨ ÏñºÍµ¥ ÏàòÏóêÏÑú Ï∂îÏ≤úÎêú Ïª§ÌîºÏùò Ïã§Ï†ú Ï¥ù Ï£ºÎ¨∏ ÌöüÏàò
coffee_order_count = None

#Ïú†ÏÇ¨ÏñºÍµ¥Ïùò ÎßàÏßÄÎßâ Ï£ºÎ¨∏ÏûêÍ∞Ä Î∞©Î¨∏Ìïú ÎÇ†Ïßú
last_order_date = None
#Ïú†ÏÇ¨ÏñºÍµ¥Ïùò ÎßàÏßÄÎßâ Ï£ºÎ¨∏Ïûê ÌååÏùºÍ≤ΩÎ°ú
last_order_face_image = None


coffee_name=None
coffee_image_url =None

inserted = False

@app.route('/get_data')
def get_data():
    cur = mysql.connection.cursor()
    cur.execute("SELECT * FROM coffee_menu")
    data = cur.fetchall()
    cur.close()
    return jsonify(data)

@app.route('/detect_person')
def detect_person():
    global person_detected, matched_result, new_face_id , coffee_id, total_order_count , coffee_order_count, last_order_date , last_order_face_image
    result = matched_result
    matched_result = None
    face_id = new_face_id

    return jsonify({
        'detected': person_detected,
        'match_result': result,
        'new_face_id': face_id,
        'coffee_id' : coffee_id,
        'total_order_count' : total_order_count,
        'coffee_order_count' : coffee_order_count,
        'last_order_date' : last_order_date,
        'last_order_face_image' : last_order_face_image,
        'coffee_name' : coffee_name,
        'coffee_image_url' : coffee_image_url

    })

def gen_frames():
    global person_detected, matched_once, check_start_time, matched_result, new_face_id, coffee_id, total_order_count, coffee_name, coffee_image_url, inserted, coffee_order_count , last_order_date,last_order_face_image

    cap = cv2.VideoCapture(0)
    #inserted = False

    while True:
        success, frame = cap.read()
        if not success:
            break

        face_locations = face_recognition.face_locations(frame)
        person_detected = len(face_locations) > 0

        if person_detected and not matched_once:
            if check_start_time is None:
                check_start_time = time.time()

        elapsed = time.time() - check_start_time if check_start_time else 0

        for (top, right, bottom, left) in face_locations:
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)

            if not matched_once and elapsed < 3:
                cv2.putText(frame, "Checking~", (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX,
                            1.0, (0, 255, 255), 2)

            elif not matched_once and elapsed >= 3:
                face_image = frame[top:bottom, left:right]
                rgb_face_image = cv2.cvtColor(face_image, cv2.COLOR_BGR2RGB)
                face_encoding = face_recognition.face_encodings(rgb_face_image)

                if face_encoding and not inserted:
                    print("‚úÖ ÏñºÍµ¥ Ïù∏ÏΩîÎî© ÏÑ±Í≥µ")
                    vector = face_encoding[0]
                    json_vector = json.dumps(vector.tolist())

                    folder_path = os.path.join("static", "faces")
                    os.makedirs(folder_path, exist_ok=True)
                    now = datetime.now()
                    timestamp_str = now.strftime("%Y%m%d_%H%M%S")
                    filename = f"face_{timestamp_str}.jpg"
                    save_path = os.path.join(folder_path, filename)
                    cv2.imwrite(save_path, face_image)
                    print(f" ÏñºÍµ¥ Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•Îê®: {save_path}")

                    try:
                        with app.app_context():
                            cur = mysql.connection.cursor()
                            cur.execute(
                                "INSERT INTO detected_faces (image_path, detected_time, face_vector) VALUES (%s, %s, %s)",
                                (save_path, now, json_vector)
                            )
                            mysql.connection.commit()
                            new_face_id = cur.lastrowid
                            print(f"‚úÖ ÏñºÍµ¥ Îì±Î°ù ÏôÑÎ£å - ID: {new_face_id}")
                            cur.close()
                        inserted = True
                    except Exception as e:
                        print("‚ùå Îì±Î°ù Ïã§Ìå®:", e)

                    with app.app_context():
                        cur = mysql.connection.cursor()
                        cur.execute("SELECT id, face_vector FROM detected_faces")
                        rows = cur.fetchall()

                        matched_ids = []
                        threshold = 0.6

                        for row in rows:
                            db_id = row[0]
                            db_vector_json = row[1]
                            db_vector = json.loads(db_vector_json)
                            dist = distance.euclidean(vector, db_vector)

                            if dist < threshold:
                                matched_ids.append(db_id)

                        print(f"üéØ Ïú†ÏÇ¨ÎèÑ ÌÜµÍ≥ºÌïú ÌõÑÎ≥¥Îì§: {matched_ids}")

                        if matched_ids:
                            format_strings = ','.join(['%s'] * len(matched_ids))

                            sql1 = f"""
                                SELECT DISTINCT face_id 
                                FROM coffee_order 
                                WHERE face_id IN ({format_strings})
                            """
                            print(f"üìå Ïã§Ìñâ SQL 1: {sql1}")
                            print(f"üìå ÌååÎùºÎØ∏ÌÑ∞ 1: {matched_ids}")
                            cur.execute(sql1, tuple(matched_ids))

                            result = cur.fetchall()
                            print(f"üìå Í≤∞Í≥º 1: {result}")

                            if result:
                                matched_face_ids = [r[0] for r in result]
                                
                                format_strings2 = ','.join(['%s'] * len(matched_face_ids))

                                # Ï£ºÎ¨∏ ÎÇ¥Ïó≠ Î∞è Ïª§Ìîº Î©îÎâ¥ Ï°∞Ìöå
                                sql2 = f"""
                                    SELECT c.coffee_id, cm.name, cm.image_url
                                    FROM coffee_order c
                                    LEFT JOIN coffee_menu cm ON c.coffee_id = cm.id
                                    WHERE c.face_id IN ({format_strings2})
                                """
                                print(f"üìå Ïã§Ìñâ SQL 2: {sql2}")
                                print(f"üìå ÌååÎùºÎØ∏ÌÑ∞ 2: {matched_face_ids}")
                                cur.execute(sql2, tuple(matched_face_ids))

                                orders = cur.fetchall()
                                print(f"üìå Í≤∞Í≥º 2: {orders}")

                                if orders:
                                    coffee_counter = Counter([o[0] for o in orders])
                                    most_common_coffee_id, _ = coffee_counter.most_common(1)[0]

                                    matched_result = "matched"
                                    
                                    coffee_id = most_common_coffee_id
                                    total_order_count = len(matched_face_ids)

                                    # Í∞ÄÏû• ÏûêÏ£º Ï£ºÎ¨∏Îêú Ïª§Ìîº Ïù¥Î¶Ñ, Ïù¥ÎØ∏ÏßÄ Ï∞æÍ∏∞
                                    for order in orders:
                                        if order[0] == most_common_coffee_id:
                                            coffee_name = order[1]
                                            coffee_image_url = order[2]
                                            break

                                    # === Ïó¨Í∏∞Ïóê coffee_order_count ÏøºÎ¶¨ Ï∂îÍ∞Ä ===
                                    sql3 = f"""
                                        SELECT COUNT(DISTINCT face_id) FROM coffee_order
                                        WHERE face_id IN ({format_strings2}) AND coffee_id = %s
                                    """
                                    print(f"üìå Ïã§Ìñâ SQL 3: {sql3}")
                                    print(f"üìå ÌååÎùºÎØ∏ÌÑ∞ 3: {matched_face_ids + [most_common_coffee_id]}")

                                    cur.execute(sql3, tuple(matched_face_ids) + (most_common_coffee_id,))
                                    coffee_order_count = cur.fetchone()[0]

                                    print(f"‚úÖ Ï∂îÏ≤ú Ïª§ÌîºÏùò Ïã§Ï†ú Ï£ºÎ¨∏ ÌöüÏàò: {coffee_order_count}")
                                    # ========================================

                                    print(f"‚úÖ Ï∂îÏ≤ú Ïª§Ìîº Ïù¥Î¶Ñ: {coffee_name}, Ïù¥ÎØ∏ÏßÄ URL: {coffee_image_url}")
                                    print(f"‚úÖ Ï∂îÏ≤ú Ïª§Ìîº ID: {most_common_coffee_id}, Ï£ºÎ¨∏ ÌöüÏàò: {total_order_count}")
                                

                                    # === ÎßàÏßÄÎßâ Ï£ºÎ¨∏Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå ===
                                    sql4 = f"""
                                        SELECT o.face_id, o.order_time, df.image_path
                                        FROM coffee_order o
                                        JOIN detected_faces df ON o.face_id = df.id
                                        WHERE o.face_id IN ({format_strings2})
                                        ORDER BY o.order_time DESC
                                        LIMIT 1
                                    """
                                    print(f"üìå Ïã§Ìñâ SQL 4: {sql4}")
                                    cur.execute(sql4, tuple(matched_face_ids))
                                    last_order_info = cur.fetchone()

                                    if last_order_info:
                                        last_order_date = last_order_info[1].strftime('%Y-%m-%d %H:%M:%S')
                                        last_order_face_image = last_order_info[2]
                                        print(f"‚úÖ ÎßàÏßÄÎßâ Ï£ºÎ¨∏Ïûê Î∞©Î¨∏ÏùºÏûê: {last_order_date}")
                                        print(f"‚úÖ ÎßàÏßÄÎßâ Ï£ºÎ¨∏Ïûê ÏñºÍµ¥ Ïù¥ÎØ∏ÏßÄ: {last_order_face_image}")
                                    else:
                                        last_order_date = None
                                        last_order_face_image = None                                
                                
                                else:
                                    print("üòï Ï£ºÎ¨∏ Ïù¥Î†•Ïù¥ ÏóÜÏäµÎãàÎã§.")
                                    matched_result = "not_matched"
                            else:
                                print("üòï ÏñºÍµ¥ Ïú†ÏÇ¨ÏûêÎäî ÏûàÏúºÎÇò Ï£ºÎ¨∏ Ïù¥Î†•Ïù¥ ÏóÜÏùå")
                                matched_result = "not_matched"
                                coffee_order_count = 0
                        else:
                            print("üòï Ïú†ÏÇ¨Ìïú ÏñºÍµ¥Ïù¥ ÏóÜÏäµÎãàÎã§.")
                            matched_result = "not_matched"
                            coffee_order_count = 0

                        matched_once = True
                        cur.close()

        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()

        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

    cap.release()


@app.route('/')
def index():
   #Ï≤òÏùå 1ÌöåÏ∞®
    global matched_once, matched_result, check_start_time, inserted
    global person_detected, new_face_id, coffee_id, total_order_count, coffee_name, coffee_image_url , coffee_order_count , last_order_date ,last_order_face_image

    matched_once = False
    matched_result = None
    check_start_time = None
    inserted = False

    person_detected = False
    new_face_id = None
    coffee_id = None
    total_order_count = None
    coffee_order_count = None
    coffee_name = None
    coffee_image_url = None
    last_order_date = None
    last_order_face_image = None

    # Î™®Îìú ÏÑ†ÌÉù ÌéòÏù¥ÏßÄÎ°ú Í∞ÄÍ∏∞
    return render_template('mode.html')

@app.route('/quick_mode', methods=['GET'])
def quick_mode():
    return render_template('index.html')
    

@app.route('/video')
def video():
    return Response(gen_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run('localhost', port=4001, debug=True)
