from flask import Flask, Response, jsonify, render_template
import face_recognition
import cv2
import os
import json
from datetime import datetime
from flask_mysqldb import MySQL
import time
from scipy.spatial import distance

app = Flask(__name__)

# MySQL ÏÑ§Ï†ï
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_PORT'] = 3306  
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'cindykangnam1!2@'
app.config['MYSQL_DB'] = 'aikiosk_db'

mysql = MySQL(app)

# Ï†ÑÏó≠ Î≥ÄÏàò
check_start_time = None
person_detected = False
matched_once = False
matched_result = None
new_face_id = None

@app.route('/get_data')
def get_data():
    cur = mysql.connection.cursor()
    cur.execute("SELECT * FROM coffee_menu")
    data = cur.fetchall()
    cur.close()
    return jsonify(data)

@app.route('/detect_person')
def detect_person():
    global person_detected, matched_result, new_face_id
    result = matched_result
    matched_result = None
    face_id = new_face_id

    return jsonify({
        'detected': person_detected,
        'match_result': result,
        'new_face_id': face_id
    })

def gen_frames():
    global person_detected, matched_once, check_start_time, matched_result, new_face_id

    cap = cv2.VideoCapture(0)
    inserted = False 

    while True:
        success, frame = cap.read()
        if not success:
            break

        face_locations = face_recognition.face_locations(frame)
        person_detected = len(face_locations) > 0

        if person_detected and not matched_once:
            if check_start_time is None:
                check_start_time = time.time()

        elapsed = time.time() - check_start_time if check_start_time else 0

        for (top, right, bottom, left) in face_locations:
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)

            if not matched_once and elapsed < 3:
                cv2.putText(frame, "Checking~", (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX,
                            1.0, (0, 255, 255), 2)

            elif not matched_once and elapsed >= 3:
                face_image = frame[top:bottom, left:right]
                rgb_face_image = cv2.cvtColor(face_image, cv2.COLOR_BGR2RGB)
                face_encoding = face_recognition.face_encodings(rgb_face_image)

                if face_encoding and not inserted:
                    print("‚úÖ ÏñºÍµ¥ Ïù∏ÏΩîÎî© ÏÑ±Í≥µ")
                    vector = face_encoding[0]
                    json_vector = json.dumps(vector.tolist())

                    # Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
                    folder_path = os.path.join("static", "faces")
                    os.makedirs(folder_path, exist_ok=True)
                    now = datetime.now()
                    timestamp_str = now.strftime("%Y%m%d_%H%M%S")
                    filename = f"face_{timestamp_str}.jpg"
                    save_path = os.path.join(folder_path, filename)
                    cv2.imwrite(save_path, face_image)
                    print(f" ÏñºÍµ¥ Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•Îê®: {save_path}")

                    try:
                        with app.app_context():
                            cur = mysql.connection.cursor()
                            cur.execute(
                                "INSERT INTO detected_faces (image_path, detected_time, face_vector) VALUES (%s, %s, %s)",
                                (save_path, now, json_vector)
                            )
                            mysql.connection.commit()
                            new_face_id = cur.lastrowid
                            print(f"‚úÖ ÏñºÍµ¥ Îì±Î°ù ÏôÑÎ£å - ID: {new_face_id}")
                            cur.close()
                        inserted = True
                    except Exception as e:
                        print("‚ùå Îì±Î°ù Ïã§Ìå®:", e)

                    with app.app_context():
                        cur = mysql.connection.cursor()
                        cur.execute("SELECT id, face_vector FROM detected_faces")
                        rows = cur.fetchall()

                        matched_ids = []
                        threshold = 0.6

                        for row in rows:
                            db_id = row[0]
                            db_vector_json = row[1]
                            db_vector = json.loads(db_vector_json)
                            dist = distance.euclidean(vector, db_vector)
                            if dist < threshold:
                                matched_ids.append(db_id)

                        print(f"üéØ Ïú†ÏÇ¨ÎèÑ ÌÜµÍ≥ºÌïú ÌõÑÎ≥¥Îì§: {matched_ids}")

                        if matched_ids:
                            format_strings = ','.join(['%s'] * len(matched_ids))
                            cur.execute(f"""
                                SELECT DISTINCT face_id 
                                FROM coffee_order 
                                WHERE face_id IN ({format_strings})
                            """, tuple(matched_ids))

                            result = cur.fetchall()
                            if result:
                                print(f"‚úÖ Ï£ºÎ¨∏ Ïù¥Î†• ÏûàÎäî ÏÇ¨Ïö©ÏûêÎì§: {[r[0] for r in result]}")
                                matched_result = "matched"
                            else:
                                print("üòï ÏñºÍµ¥ Ïú†ÏÇ¨ÏûêÎäî ÏûàÏúºÎÇò Ï£ºÎ¨∏ Ïù¥Î†•Ïù¥ ÏóÜÏùå")
                                matched_result = "not_matched"
                        else:
                            print("üòï Ïú†ÏÇ¨Ìïú ÏñºÍµ¥Ïù¥ ÏóÜÏäµÎãàÎã§.")
                            matched_result = "not_matched"

                        matched_once = True
                        cur.close()

        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()

        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

    cap.release()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video')
def video():
    return Response(gen_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run('0.0.0.0', port=5001, debug=True)
